import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Confetti from 'react-confetti';

const PATTERNS = {
  1: [
    [0, 0, 0, 3, 0, 5, 2, 9, 0],
    [0, 0, 4, 2, 0, 0, 7, 0, 0],
    [9, 0, 2, 0, 0, 6, 0, 0, 0],
    [0, 2, 0, 0, 3, 9, 0, 4, 5],
    [0, 4, 0, 0, 7, 0, 0, 6, 0],
    [7, 9, 0, 5, 6, 0, 0, 3, 0],
    [0, 0, 0, 7, 0, 0, 9, 0, 2],
    [0, 0, 7, 0, 0, 1, 8, 0, 0],
    [0, 6, 9, 4, 0, 2, 0, 0, 0]
  ],

  2: [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
  ],

  3: [
    [0, 2, 0, 6, 0, 8, 0, 0, 0],
    [5, 8, 0, 0, 0, 9, 7, 0, 0],
    [0, 0, 0, 0, 4, 0, 0, 0, 0],
    [3, 7, 0, 0, 0, 0, 5, 0, 0],
    [6, 0, 0, 0, 0, 0, 0, 0, 4],
    [0, 0, 8, 0, 0, 0, 0, 1, 3],
    [0, 0, 0, 0, 2, 0, 0, 0, 0],
    [0, 0, 9, 8, 0, 0, 0, 3, 6],
    [0, 0, 0, 3, 0, 6, 0, 9, 0]
  ],

  4: [
    [1, 0, 0, 0, 0, 7, 0, 9, 0],
    [0, 3, 0, 0, 2, 0, 0, 0, 8],
    [0, 0, 9, 6, 0, 0, 5, 0, 0],
    [0, 9, 0, 0, 0, 0, 0, 7, 3],
    [8, 0, 0, 0, 4, 0, 0, 0, 5],
    [2, 7, 0, 0, 0, 0, 0, 4, 0],
    [0, 0, 5, 0, 0, 9, 6, 0, 0],
    [9, 0, 0, 0, 5, 0, 0, 2, 0],
    [0, 4, 0, 7, 0, 0, 0, 0, 1]
  ],

  5: [
    [0, 0, 4, 0, 0, 3, 0, 7, 0],
    [0, 0, 0, 7, 0, 0, 2, 0, 0],
    [0, 0, 0, 0, 9, 0, 0, 4, 0],
    [5, 0, 0, 0, 0, 0, 6, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 9, 0, 0, 0, 0, 0, 8],
    [0, 3, 0, 0, 6, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 2, 0, 0, 0],
    [0, 5, 0, 1, 0, 0, 9, 0, 0]
  ],

  6: [
    [0, 0, 0, 6, 0, 0, 4, 0, 0],
    [7, 0, 0, 0, 0, 3, 6, 0, 0],
    [0, 0, 0, 0, 9, 1, 0, 8, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 5, 0, 1, 8, 0, 0, 0, 3],
    [0, 0, 0, 3, 0, 6, 0, 4, 5],
    [0, 4, 0, 2, 0, 0, 0, 6, 0],
    [9, 0, 3, 0, 0, 0, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 1, 0, 0]
  ],

  7: [
    [2, 0, 0, 3, 0, 0, 0, 0, 0],
    [8, 0, 4, 0, 6, 2, 0, 0, 3],
    [0, 1, 3, 8, 0, 0, 2, 0, 0],
    [0, 0, 0, 0, 2, 0, 3, 9, 0],
    [5, 0, 7, 0, 0, 0, 6, 0, 1],
    [0, 3, 2, 0, 5, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 9, 7, 4, 0],
    [7, 0, 0, 6, 1, 0, 9, 0, 5],
    [0, 0, 0, 0, 0, 7, 0, 0, 8]
  ],

  8: [
    [0, 0, 0, 0, 0, 0, 0, 1, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 3, 0],
    [0, 0, 0, 0, 0, 7, 0, 4, 0],
    [3, 0, 0, 0, 9, 0, 0, 0, 5],
    [0, 4, 0, 2, 0, 0, 0, 0, 0],
    [0, 7, 0, 0, 0, 0, 2, 6, 0],
    [0, 0, 0, 6, 0, 0, 0, 0, 0],
    [4, 3, 0, 0, 0, 0, 0, 0, 0]
  ],

  9: [
    [0, 0, 4, 8, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 5, 0, 9, 0],
    [0, 0, 0, 0, 0, 0, 0, 7, 6],
    [6, 0, 0, 0, 7, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 2],
    [0, 0, 0, 0, 1, 0, 0, 0, 3],
    [7, 3, 0, 0, 0, 0, 0, 0, 0],
    [0, 8, 0, 6, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 4, 0, 0]
  ],

  10: [
    [0, 0, 0, 0, 0, 0, 3, 0, 0],
    [0, 0, 7, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 6, 0, 0, 0, 5, 0],
    [0, 9, 0, 0, 0, 0, 0, 7, 0],
    [0, 0, 0, 3, 0, 8, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 4, 0],
    [0, 5, 0, 0, 0, 9, 0, 0, 6],
    [0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 4, 0, 0, 0, 0, 0, 0]
  ],

  11: [
    [0, 0, 0, 0, 7, 0, 0, 0, 9],
    [0, 0, 3, 0, 0, 0, 6, 0, 0],
    [0, 0, 0, 4, 0, 0, 0, 1, 0],
    [7, 0, 0, 0, 6, 0, 0, 0, 0],
    [0, 9, 0, 0, 0, 0, 0, 2, 0],
    [0, 0, 0, 0, 8, 0, 0, 0, 4],
    [0, 3, 0, 0, 0, 7, 0, 0, 0],
    [0, 0, 5, 0, 0, 0, 3, 0, 0],
    [4, 0, 0, 0, 2, 0, 0, 0, 0]
  ],

  12: [
    [0, 6, 0, 0, 0, 0, 2, 0, 0],
    [0, 0, 0, 3, 0, 0, 0, 0, 1],
    [0, 9, 3, 0, 6, 0, 0, 0, 0],
    [7, 0, 0, 6, 0, 0, 0, 0, 3],
    [0, 0, 1, 0, 0, 0, 9, 0, 0],
    [9, 0, 0, 0, 0, 4, 0, 0, 6],
    [0, 0, 0, 0, 4, 0, 3, 6, 0],
    [3, 0, 0, 0, 0, 5, 0, 0, 0],
    [0, 0, 7, 0, 0, 0, 0, 2, 0]
  ],

  13: [
    [0, 0, 0, 0, 4, 0, 0, 0, 0],
    [0, 8, 0, 0, 0, 0, 0, 6, 0],
    [0, 0, 2, 9, 0, 3, 1, 0, 0],
    [0, 0, 5, 3, 0, 7, 2, 0, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 3],
    [0, 0, 9, 6, 0, 1, 5, 0, 0],
    [0, 0, 6, 1, 0, 9, 3, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 9, 0],
    [0, 0, 0, 0, 6, 0, 0, 0, 0]
  ],

  14: [
    [0, 0, 3, 0, 2, 0, 6, 0, 0],
    [9, 0, 0, 3, 0, 5, 0, 0, 1],
    [0, 0, 1, 8, 0, 6, 4, 0, 0],
    [0, 0, 8, 1, 0, 2, 9, 0, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 8],
    [0, 0, 6, 7, 0, 8, 2, 0, 0],
    [0, 0, 2, 6, 0, 9, 5, 0, 0],
    [8, 0, 0, 2, 0, 3, 0, 0, 9],
    [0, 0, 5, 0, 1, 0, 3, 0, 0]
  ],

  15: [
    [0, 0, 0, 0, 6, 0, 0, 0, 3],
    [0, 0, 9, 0, 0, 0, 6, 2, 0],
    [0, 7, 0, 0, 0, 0, 8, 0, 0],
    [0, 0, 0, 3, 0, 0, 4, 6, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 2],
    [0, 3, 1, 0, 0, 8, 0, 0, 0],
    [0, 0, 3, 0, 0, 0, 0, 7, 0],
    [0, 5, 7, 0, 0, 0, 2, 0, 0],
    [6, 0, 0, 0, 2, 0, 0, 0, 0]
  ],

  16: [
    [0, 0, 1, 0, 0, 7, 0, 9, 0],
    [0, 3, 0, 0, 2, 0, 0, 0, 8],
    [0, 0, 0, 6, 0, 0, 5, 0, 0],
    [0, 9, 0, 0, 0, 0, 0, 7, 3],
    [8, 0, 0, 0, 4, 0, 0, 0, 5],
    [2, 7, 0, 0, 0, 0, 0, 4, 0],
    [0, 0, 5, 0, 0, 9, 6, 0, 0],
    [9, 0, 0, 0, 5, 0, 0, 2, 0],
    [0, 4, 0, 7, 0, 0, 0, 0, 1]
  ],

  17: [
    [4, 0, 0, 0, 0, 0, 0, 3, 0],
    [0, 0, 0, 0, 7, 0, 0, 0, 0],
    [0, 0, 3, 6, 0, 0, 0, 8, 0],
    [0, 0, 0, 0, 0, 3, 0, 0, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [9, 0, 0, 7, 0, 0, 0, 0, 0],
    [0, 6, 0, 0, 0, 8, 4, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 5]
  ],

  18: [
    [0, 0, 0, 8, 0, 1, 0, 0, 0],
    [0, 0, 2, 0, 0, 0, 6, 0, 0],
    [0, 7, 0, 0, 0, 0, 0, 9, 0],
    [0, 5, 0, 0, 6, 0, 0, 3, 0],
    [3, 0, 0, 4, 0, 7, 0, 0, 2],
    [0, 1, 0, 0, 2, 0, 0, 7, 0],
    [0, 6, 0, 0, 0, 0, 0, 2, 0],
    [0, 0, 1, 0, 0, 0, 8, 0, 0],
    [0, 0, 0, 9, 0, 4, 0, 0, 0]
  ],

  19: [
    [2, 0, 0, 0, 8, 0, 3, 0, 0],
    [0, 6, 0, 0, 0, 3, 0, 0, 0],
    [0, 0, 7, 5, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 2, 0, 0, 0, 8],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [6, 0, 0, 0, 5, 4, 0, 0, 0],
    [0, 0, 0, 0, 0, 7, 9, 0, 0],
    [0, 0, 0, 4, 0, 0, 0, 6, 0],
    [0, 0, 9, 0, 3, 0, 0, 0, 1]
  ],

  20: [
    [0, 0, 0, 6, 0, 0, 4, 0, 0],
    [7, 0, 0, 0, 0, 3, 6, 0, 0],
    [0, 0, 0, 0, 9, 1, 0, 8, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 5, 0, 1, 8, 0, 0, 0, 3],
    [0, 0, 0, 3, 0, 6, 0, 4, 5],
    [0, 4, 0, 2, 0, 0, 0, 6, 0],
    [9, 0, 3, 0, 0, 0, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 1, 0, 0]
  ],

  21: [
    [0, 0, 0, 0, 9, 0, 0, 0, 4],
    [5, 0, 0, 0, 0, 3, 0, 0, 0],
    [0, 3, 0, 0, 0, 0, 7, 0, 0],
    [0, 0, 4, 0, 2, 0, 0, 9, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 5, 0, 8, 0, 0],
    [0, 0, 7, 0, 0, 0, 0, 5, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 9],
    [6, 0, 0, 0, 3, 0, 0, 0, 0]
  ],

  22: [
    [0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 7, 0, 0, 0, 5, 0],
    [0, 5, 9, 3, 0, 8, 0, 7, 0],
    [0, 9, 0, 1, 0, 6, 0, 0, 0],
    [0, 0, 0, 9, 0, 5, 7, 0, 0],
    [0, 0, 0, 8, 4, 2, 0, 9, 0],
    [0, 8, 0, 6, 0, 1, 9, 0, 0],
    [0, 0, 7, 0, 0, 4, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0]
  ],

  23: [
    [0, 0, 0, 0, 0, 0, 9, 4, 0],
    [0, 0, 0, 4, 0, 0, 3, 0, 0],
    [0, 5, 9, 0, 0, 0, 0, 0, 0],
    [0, 3, 0, 0, 5, 0, 0, 7, 9],
    [0, 0, 0, 8, 7, 3, 0, 0, 0],
    [0, 9, 0, 0, 0, 0, 6, 3, 0],
    [0, 0, 0, 7, 0, 9, 0, 0, 0],
    [6, 0, 4, 0, 0, 0, 0, 0, 8],
    [0, 0, 5, 0, 0, 0, 4, 0, 0]
  ],

  24: [
    [0, 0, 0, 0, 8, 0, 0, 7, 0],
    [0, 5, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 9, 0, 0, 5, 6, 0, 0],
    [9, 0, 5, 0, 0, 0, 0, 0, 3],
    [0, 0, 0, 3, 0, 4, 0, 0, 0],
    [0, 0, 0, 0, 7, 0, 9, 0, 1],
    [0, 0, 3, 0, 0, 0, 8, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 4, 0],
    [0, 6, 0, 0, 0, 9, 0, 0, 0]
  ],

  25: [
    [0, 0, 3, 8, 0, 0, 0, 5, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 9],
    [9, 0, 0, 0, 0, 7, 8, 0, 0],
    [0, 5, 7, 0, 9, 0, 3, 0, 1],
    [0, 0, 0, 3, 0, 0, 0, 9, 0],
    [0, 0, 8, 0, 5, 0, 9, 0, 7],
    [8, 0, 1, 0, 0, 0, 0, 0, 6],
    [0, 0, 0, 0, 8, 6, 7, 9, 0],
    [7, 3, 9, 0, 0, 0, 0, 0, 0]
  ],

  26: [
    [0, 0, 6, 0, 0, 4, 0, 0, 0],
    [0, 8, 0, 0, 7, 0, 0, 0, 6],
    [4, 0, 0, 3, 0, 0, 8, 0, 5],
    [9, 0, 7, 5, 0, 0, 3, 4, 0],
    [0, 0, 0, 9, 0, 2, 0, 0, 0],
    [0, 1, 5, 0, 0, 8, 7, 0, 9],
    [5, 0, 9, 7, 0, 0, 0, 0, 1],
    [3, 0, 0, 0, 8, 0, 0, 1, 0],
    [0, 0, 8, 4, 0, 0, 5, 0, 0]
  ],

  27: [
    [0, 0, 0, 0, 3, 0, 0, 0, 1],
    [0, 0, 0, 2, 0, 0, 3, 0, 0],
    [0, 5, 0, 6, 1, 7, 0, 0, 0],
    [0, 0, 9, 4, 5, 0, 1, 0, 0],
    [5, 3, 6, 0, 0, 9, 0, 0, 0],
    [0, 1, 4, 0, 8, 6, 0, 0, 0],
    [0, 9, 0, 5, 0, 3, 0, 6, 0],
    [0, 0, 0, 7, 0, 0, 9, 0, 0],
    [1, 0, 3, 0, 0, 0, 4, 0, 0]
  ],

  28: [
    [0, 0, 9, 0, 0, 0, 0, 5, 0],
    [0, 6, 0, 3, 9, 0, 8, 0, 0],
    [0, 0, 8, 0, 6, 0, 4, 0, 0],
    [7, 5, 0, 0, 3, 8, 9, 0, 0],
    [0, 9, 0, 4, 0, 7, 5, 0, 3],
    [0, 0, 3, 9, 0, 0, 0, 4, 8],
    [9, 0, 4, 0, 5, 0, 0, 3, 0],
    [0, 0, 0, 0, 8, 9, 0, 0, 7],
    [0, 3, 0, 7, 0, 0, 1, 0, 0]
  ],

  29: [
    [0, 0, 0, 0, 7, 0, 0, 0, 3],
    [0, 4, 0, 3, 0, 0, 0, 0, 0],
    [0, 0, 0, 6, 0, 5, 0, 8, 0],
    [0, 5, 0, 8, 3, 0, 0, 9, 0],
    [0, 0, 0, 7, 0, 9, 4, 0, 0],
    [0, 0, 8, 0, 0, 4, 7, 3, 0],
    [0, 3, 9, 4, 0, 8, 0, 5, 0],
    [0, 0, 4, 0, 0, 7, 0, 0, 0],
    [5, 0, 0, 0, 6, 0, 0, 0, 9]
  ],

  30: [
    [0, 0, 5, 0, 7, 3, 0, 0, 0],
    [0, 0, 0, 6, 0, 0, 9, 5, 0],
    [0, 6, 3, 5, 0, 0, 7, 0, 0],
    [4, 0, 0, 0, 8, 0, 0, 3, 0],
    [0, 8, 7, 0, 0, 9, 0, 4, 0],
    [0, 0, 0, 7, 5, 4, 0, 0, 9],
    [0, 3, 9, 0, 0, 5, 0, 0, 7],
    [0, 0, 8, 0, 0, 6, 0, 9, 0],
    [5, 0, 0, 0, 9, 0, 6, 0, 0]
  ],

  31: [
    [0, 0, 0, 0, 0, 0, 9, 0, 0],
    [5, 0, 0, 4, 0, 0, 0, 0, 0],
    [0, 3, 9, 0, 0, 0, 0, 7, 0],
    [0, 0, 4, 0, 3, 7, 8, 0, 0],
    [0, 5, 0, 8, 0, 0, 0, 9, 0],
    [0, 7, 8, 0, 9, 5, 0, 0, 6],
    [0, 0, 0, 7, 0, 0, 5, 6, 0],
    [0, 4, 0, 0, 0, 6, 0, 0, 3],
    [0, 0, 6, 0, 0, 0, 0, 4, 0]
  ],

  32: [
    [0, 8, 0, 0, 0, 6, 0, 0, 9],
    [3, 0, 5, 9, 0, 0, 0, 8, 0],
    [0, 7, 0, 8, 5, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 3, 0, 0],
    [0, 5, 3, 7, 8, 9, 1, 6, 0],
    [0, 6, 1, 0, 3, 0, 0, 9, 5],
    [0, 0, 0, 0, 0, 4, 0, 0, 1],
    [0, 9, 4, 1, 0, 3, 5, 0, 0],
    [5, 0, 0, 0, 0, 0, 0, 0, 0]
  ],

  33: [
    [0, 6, 3, 0, 0, 0, 0, 0, 9],
    [0, 8, 0, 3, 4, 0, 0, 7, 0],
    [0, 0, 0, 0, 9, 0, 4, 0, 0],
    [4, 0, 0, 7, 0, 0, 0, 8, 0],
    [0, 0, 6, 0, 3, 0, 9, 0, 0],
    [0, 7, 0, 0, 0, 8, 0, 0, 6],
    [0, 0, 8, 0, 0, 0, 0, 9, 0],
    [0, 4, 0, 0, 0, 7, 0, 0, 3],
    [9, 0, 0, 8, 0, 0, 5, 0, 0]
  ],

  34: [
    [0, 1, 0, 7, 0, 0, 8, 0, 0],
    [0, 0, 4, 0, 1, 8, 0, 5, 0],
    [7, 0, 0, 6, 0, 0, 0, 9, 3],
    [0, 9, 0, 3, 0, 5, 0, 0, 7],
    [0, 6, 0, 8, 9, 7, 0, 0, 0],
    [0, 7, 8, 0, 0, 0, 0, 4, 9],
    [3, 0, 0, 9, 5, 6, 7, 0, 0],
    [0, 5, 0, 4, 0, 9, 1, 0, 0],
    [0, 0, 7, 0, 8, 0, 0, 3, 0]
  ],

  35: [
    [0, 0, 7, 0, 9, 4, 0, 3, 0],
    [0, 0, 0, 0, 7, 0, 4, 0, 0],
    [5, 0, 4, 0, 0, 0, 6, 0, 9],
    [7, 0, 9, 0, 5, 0, 0, 0, 3],
    [0, 0, 0, 8, 0, 3, 0, 4, 0],
    [6, 0, 0, 9, 2, 0, 7, 0, 1],
    [8, 0, 3, 0, 6, 7, 0, 0, 5],
    [0, 0, 0, 0, 4, 0, 0, 6, 0],
    [0, 9, 0, 5, 3, 0, 1, 0, 0]
  ],

  36: [
    [0, 0, 0, 5, 0, 0, 3, 0, 0],
    [0, 3, 0, 0, 8, 0, 4, 0, 9],
    [4, 0, 0, 0, 9, 3, 0, 0, 7],
    [0, 9, 0, 0, 7, 0, 0, 8, 5],
    [3, 0, 0, 9, 0, 8, 0, 0, 0],
    [0, 0, 0, 6, 0, 7, 0, 0, 0],
    [8, 0, 0, 0, 5, 9, 0, 7, 4],
    [0, 7, 3, 0, 4, 0, 0, 0, 1],
    [0, 5, 0, 0, 3, 0, 0, 9, 6]
  ],

  37: [
    [9, 5, 0, 0, 0, 7, 4, 0, 0],
    [0, 0, 0, 5, 0, 9, 0, 0, 3],
    [0, 7, 0, 0, 0, 0, 0, 9, 0],
    [0, 8, 7, 9, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 8, 0, 0, 0, 0],
    [4, 0, 0, 0, 0, 0, 7, 5, 0],
    [0, 1, 0, 0, 0, 0, 0, 6, 0],
    [0, 0, 0, 6, 0, 1, 0, 3, 8],
    [0, 0, 5, 3, 7, 0, 0, 0, 9]
  ],

  38: [
    [0, 3, 9, 7, 0, 4, 0, 0, 0],
    [7, 0, 0, 0, 6, 0, 9, 3, 0],
    [0, 0, 0, 9, 5, 0, 0, 7, 0],
    [4, 0, 8, 0, 9, 0, 0, 0, 1],
    [9, 5, 0, 8, 3, 1, 7, 0, 0],
    [0, 0, 0, 0, 7, 0, 5, 9, 0],
    [0, 0, 0, 3, 0, 5, 0, 1, 7],
    [0, 9, 3, 6, 0, 0, 0, 4, 5],
    [0, 7, 0, 0, 4, 9, 0, 0, 6]
  ],

  39: [
    [0, 0, 0, 0, 9, 5, 0, 7, 0],
    [0, 3, 0, 0, 0, 0, 4, 0, 8],
    [5, 0, 8, 0, 0, 0, 0, 9, 0],
    [0, 0, 4, 0, 8, 7, 9, 0, 0],
    [0, 4, 0, 3, 0, 9, 0, 0, 0],
    [0, 0, 9, 0, 7, 0, 0, 0, 5],
    [0, 7, 0, 9, 0, 0, 8, 0, 0],
    [6, 0, 0, 8, 0, 0, 0, 4, 0],
    [0, 8, 0, 5, 0, 0, 0, 0, 9]
  ],

  40: [
    [1, 0, 0, 0, 3, 0, 0, 0, 7],
    [0, 0, 0, 0, 5, 0, 3, 0, 0],
    [0, 6, 0, 7, 0, 0, 0, 0, 0],
    [0, 5, 3, 0, 0, 0, 7, 9, 0],
    [0, 7, 0, 8, 4, 0, 9, 0, 0],
    [4, 0, 0, 3, 0, 7, 5, 0, 0],
    [0, 0, 0, 0, 0, 9, 0, 8, 0],
    [0, 9, 0, 5, 0, 0, 0, 0, 0],
    [0, 0, 7, 0, 2, 0, 0, 4, 0]
  ],

  41: [
    [0, 0, 7, 5, 0, 8, 0, 0, 0],
    [3, 9, 0, 6, 4, 0, 7, 1, 0],
    [0, 0, 0, 0, 7, 1, 3, 0, 0],
    [0, 6, 3, 0, 0, 0, 8, 0, 0],
    [0, 8, 4, 0, 9, 3, 0, 0, 0],
    [7, 0, 0, 0, 0, 5, 4, 3, 9],
    [0, 0, 8, 1, 0, 9, 0, 0, 7],
    [0, 0, 0, 0, 3, 4, 0, 9, 8],
    [0, 7, 0, 9, 0, 6, 1, 0, 0]
  ],

  42: [
    [0, 0, 5, 3, 0, 0, 0, 0, 0],
    [6, 0, 0, 0, 9, 5, 0, 0, 0],
    [0, 0, 7, 4, 8, 6, 9, 3, 0],
    [0, 8, 0, 0, 5, 3, 0, 0, 6],
    [0, 9, 3, 0, 0, 0, 4, 8, 0],
    [5, 0, 0, 0, 1, 0, 0, 7, 0],
    [0, 4, 9, 7, 2, 8, 3, 0, 0],
    [0, 0, 8, 0, 6, 0, 0, 5, 4],
    [0, 5, 0, 0, 0, 9, 7, 0, 0]
  ],

  43: [
    [0, 5, 0, 9, 0, 0, 0, 0, 3],
    [0, 0, 0, 5, 6, 8, 0, 0, 0],
    [3, 0, 9, 0, 0, 0, 6, 5, 7],
    [7, 3, 8, 0, 5, 0, 9, 0, 0],
    [0, 9, 0, 0, 7, 0, 0, 3, 0],
    [0, 0, 5, 3, 9, 0, 0, 7, 4],
    [5, 7, 0, 0, 0, 0, 3, 0, 1],
    [0, 0, 0, 6, 0, 3, 0, 1, 0],
    [9, 0, 0, 0, 4, 7, 0, 0, 0]
  ],

  44: [
    [5, 0, 0, 9, 0, 0, 3, 0, 0],
    [0, 6, 0, 0, 0, 3, 5, 7, 9],
    [0, 0, 0, 4, 6, 8, 0, 2, 0],
    [0, 0, 0, 0, 9, 7, 0, 6, 0],
    [6, 8, 3, 2, 0, 1, 9, 5, 0],
    [0, 9, 5, 3, 8, 0, 0, 4, 0],
    [4, 3, 9, 8, 5, 2, 0, 1, 6],
    [9, 2, 7, 1, 4, 0, 6, 3, 0],
    [0, 5, 6, 7, 3, 9, 8, 0, 0]
  ],

  45: [
    [0, 0, 3, 0, 1, 0, 0, 8, 9],
    [4, 9, 0, 0, 0, 3, 0, 5, 7],
    [0, 0, 8, 5, 9, 7, 4, 1, 0],
    [0, 7, 9, 0, 4, 0, 8, 3, 5],
    [6, 8, 0, 0, 7, 5, 3, 4, 1],
    [5, 3, 4, 0, 8, 1, 7, 0, 0],
    [8, 0, 7, 4, 5, 9, 0, 0, 6],
    [9, 0, 0, 3, 6, 8, 1, 7, 0],
    [7, 1, 6, 8, 0, 2, 9, 0, 0]
  ],

  46: [
    [0, 6, 0, 0, 3, 0, 0, 8, 0],
    [0, 0, 5, 0, 0, 0, 6, 0, 0],
    [0, 8, 0, 5, 0, 7, 0, 0, 3],
    [0, 9, 0, 8, 5, 3, 7, 0, 0],
    [0, 0, 8, 0, 9, 7, 5, 0, 1],
    [3, 0, 7, 0, 1, 0, 9, 0, 6],
    [2, 3, 9, 0, 0, 1, 0, 7, 4],
    [1, 5, 0, 7, 4, 9, 3, 6, 0],
    [0, 0, 4, 3, 2, 8, 0, 0, 0]
  ],

  47: [
    [0, 1, 0, 0, 0, 8, 0, 4, 0],
    [3, 0, 0, 0, 9, 7, 6, 1, 0],
    [8, 9, 0, 0, 0, 0, 0, 0, 3],
    [0, 5, 0, 9, 0, 0, 0, 6, 0],
    [9, 7, 0, 4, 0, 6, 3, 8, 0],
    [0, 3, 0, 7, 0, 2, 0, 5, 0],
    [6, 0, 7, 0, 0, 0, 9, 0, 8],
    [0, 6, 8, 0, 5, 0, 0, 0, 7],
    [0, 4, 9, 0, 0, 1, 0, 3, 0]
  ],

  48: [
    [0, 0, 0, 3, 0, 0, 0, 9, 0],
    [3, 0, 0, 0, 9, 0, 0, 0, 5],
    [0, 5, 9, 4, 8, 7, 3, 0, 0],
    [9, 0, 7, 0, 5, 0, 0, 0, 6],
    [0, 3, 6, 7, 0, 5, 9, 8, 0],
    [0, 0, 8, 6, 3, 9, 0, 5, 0],
    [5, 8, 3, 9, 7, 0, 6, 0, 0],
    [7, 0, 0, 0, 0, 6, 0, 0, 9],
    [0, 9, 6, 5, 0, 0, 0, 7, 0]
  ],

  49: [
    [3, 0, 0, 0, 0, 0, 6, 0, 1],
    [5, 8, 0, 3, 0, 1, 0, 0, 0],
    [0, 0, 1, 7, 6, 9, 5, 3, 0],
    [0, 5, 0, 4, 0, 0, 3, 9, 0],
    [0, 1, 7, 9, 3, 5, 8, 0, 0],
    [0, 0, 3, 8, 7, 0, 0, 0, 5],
    [1, 4, 0, 0, 0, 0, 9, 0, 8],
    [0, 3, 0, 0, 0, 8, 0, 5, 0],
    [9, 0, 8, 5, 0, 0, 0, 7, 4]
  ],

  50: [
    [0, 5, 0, 3, 0, 0, 0, 0, 9],
    [7, 0, 0, 0, 0, 0, 0, 6, 8],
    [0, 0, 9, 0, 5, 7, 0, 1, 0],
    [0, 3, 0, 5, 4, 0, 7, 0, 0],
    [1, 4, 0, 0, 0, 8, 0, 0, 0],
    [8, 7, 0, 0, 6, 9, 0, 5, 4],
    [0, 6, 0, 0, 7, 0, 0, 0, 2],
    [0, 0, 5, 0, 0, 0, 0, 0, 6],
    [9, 0, 0, 0, 0, 0, 1, 0, 0]
  ]

  // Add more levels up to 20 as needed
};

const generateInitialBoard = (level) => {
  const defaultPattern = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
  ];

  const pattern = PATTERNS[level] || defaultPattern;
  return pattern.map(row => [...row]);
};

const Sudoku = () => {
  const navigate = useNavigate();
  const [level, setLevel] = useState(1);
  const [board, setBoard] = useState([]);
  const [initialBoard, setInitialBoard] = useState([]);
  const [solved, setSolved] = useState(false);
  const [showAnimation, setShowAnimation] = useState(false);
  const [selectedCell, setSelectedCell] = useState(null);

  useEffect(() => {
    initializeGame(level);
  }, [level]);

  const initializeGame = (newLevel) => {
    const newBoard = generateInitialBoard(newLevel);
    setInitialBoard(newBoard.map(row => [...row]));
    setBoard(newBoard.map(row => [...row]));
    setSolved(false);
    setSelectedCell(null);
  };

  // 3x3 बॉक्स स्टाइलिंग लॉजिक
  const getBoxClass = (row, col) => {
    const boxRow = Math.floor(row / 3);
    const boxCol = Math.floor(col / 3);
    return (boxRow + boxCol) % 2 === 0 ? 'bg-gray-50' : 'bg-white';
  };

  const checkSolution = () => {
    // यहां अपना सल्यूशन चेक लॉजिक जोड़ें
    const isValid = board.flat().every(cell => cell !== 0);
    if (isValid) {
      setShowAnimation(true);
      setTimeout(() => setSolved(true), 1000);
    }
  };

  const handleInputChange = (row, col, value) => {
    const num = Math.max(0, Math.min(9, parseInt(value) || 0));
    const newBoard = [...board];
    newBoard[row][col] = num;
    setBoard(newBoard);
    checkSolution();
  };

  const handleCellClick = (row, col) => {
    if (!initialBoard[row][col]) {
      setSelectedCell({ row, col });
    }
  };

  const handleNumberClick = (num) => {
    if (selectedCell) {
      const { row, col } = selectedCell;
      handleInputChange(row, col, num);
    }
  };

  const handleLevelChange = (newLevel) => {
    setLevel(Math.max(1, Math.min(50, newLevel)));
    setShowAnimation(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 to-blue-900 p-4 md:p-8 flex flex-col items-center">
      {showAnimation && <Confetti recycle={false} numberOfPieces={500} />}
      <div class="max-w-2xl mx-auto">

        <div className="w-full max-w-2xl flex justify-between mb-6">
          <button
            onClick={() => navigate('/')}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
          >
           ← Home
          </button>
          <p class="text-white text-center text-4xl font-bold">Sudoku</p>
          <div className="flex gap-4">
            <button
              onClick={() => initializeGame(level)}
              className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
            >
              Re Start
            </button>
          </div>
        </div>

        <div className="w-full max-w-xl bg-white p-4 rounded-xl shadow-2xl">
          <div className="mb-6 flex flex-col items-center gap-4">
            <h2 className="text-2xl font-bold text-gray-800">Level: {level}</h2>
            <div className="flex gap-2">
              <input
                type="range"
                min="1"
                max="50"
                value={level}
                onChange={(e) => handleLevelChange(parseInt(e.target.value))}
                className="w-full"
              />
            </div>
          </div>

          <div className="grid grid-cols-9 gap-0.5 bg-gray-300 border-2 border-gray-400">
            {board.map((row, rowIndex) =>
              row.map((num, colIndex) => {
                const isInitial = initialBoard[rowIndex][colIndex] !== 0;
                const boxClass = getBoxClass(rowIndex, colIndex);
                const isSelected = selectedCell?.row === rowIndex && selectedCell?.col === colIndex;

                return (
                  <div
                    key={`${rowIndex}-${colIndex}`}
                    className={`relative ${boxClass} 
                    ${colIndex % 3 === 2 && 'border-r-2'} 
                    ${rowIndex % 3 === 2 && 'border-b-2'}
                    border-gray-400`}
                  >
                    <input
                      type="number"
                      min="1"
                      max="9"
                      value={num || ''}
                      onChange={(e) => handleInputChange(rowIndex, colIndex, e.target.value)}
                      onClick={() => handleCellClick(rowIndex, colIndex)}
                      className={`w-full h-8 md:h-12 text-center text-lg font-bold 
                      ${isInitial ? 'text-gray-700 bg-gray-100' : 'text-black bg-transparent'}
                      focus:outline-none focus:ring-2 focus:ring-yellow-400
                      ${num !== 0 && !isInitial ? 'text-blue-600 font-bold' : ''}
                      ${isSelected ? 'ring-2 ring-yellow-400' : ''}`}
                      disabled={isInitial}
                    />

                    {/* 3x3 बॉक्स हाइलाइट */}
                    {(colIndex === 0 || colIndex === 3 || colIndex === 6) && (
                      <div className="absolute left-0 top-0 w-0.5 h-full bg-gray-400" />
                    )}
                    {(rowIndex === 0 || rowIndex === 3 || rowIndex === 6) && (
                      <div className="absolute top-0 left-0 h-0.5 w-full bg-gray-400" />
                    )}
                  </div>
                );
              })
            )}
          </div>

          {/* Number Keypad */}
          <div className="mt-6 grid grid-cols-5 gap-2">
            {[1, 2, 3, 4, 5, 6, 7, 8, 9, 'Clear'].map((num) => (
              <button
                key={num}
                onClick={() => num === 'Clear' ? handleNumberClick(0) : handleNumberClick(num)}
                className={`p-4 text-xl font-bold rounded-lg transition-colors
                  ${num === 'Clear' 
                    ? 'bg-red-500 hover:bg-red-600 text-white' 
                    : 'bg-blue-500 hover:bg-blue-600 text-white'}`}
              >
                {num}
              </button>
            ))}
          </div>

          {solved && (
            <div className="mt-6 p-4 bg-green-100 rounded-lg animate-fade-in">
              <div className="text-center">
                <h3 className="text-2xl font-bold text-green-800 mb-4">Congratulaion! 🎉</h3>
                <div className="flex justify-center gap-4">
                  {level < 20 && (
                    <button
                      onClick={() => setLevel(l => l + 1)}
                      className="px-6 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
                    >
                      Next Level
                    </button>
                  )}
                  <button
                    onClick={() => initializeGame(level)}
                    className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                  >
                    Play Again
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Sudoku;